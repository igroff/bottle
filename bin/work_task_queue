#! /usr/bin/env bash
# vim: ft=sh

##############################################################################
# This is a, theorectically, simple way to include other scripts ( via source )
# in this one without having included files re-include the includes :)
#
# Any files in the directory where this script is running that match *.inc
# will be in the order returned from the expansion of *.inc, so alphabetical
# ordering.  Thus if you wish to control the order more explicitly you can
# name your includes 01_*.inc, 02_*.inc and so on.
##############################################################################
# begin include processing
MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export INCLUDE_LIST=${INCLUDE_LIST}
for include in ${MY_DIR}/*.inc
do
  INCLUDE_KEY=INCLUDED_${include}
  # if we find that our include key is _not_ already in our include list
  # we'll perform the include
  # this is done by removing $INCLUDE_KEY from $INCLUDE_LIST and comparing
  # the resultant to INCLUDE_LIST, if equal, nothing has been removed and thus
  # $INCLUDE_KEY is not in $INCLUDE_LIST
  if [ "${INCLUDE_LIST//${INCLUDE_KEY}//}" == "${INCLUDE_LIST}" ]
  then
    [ -n "${DEBUG}" ] && echo "including file: ${include}" >&2
    source ${include}
    INCLUDE_LIST=${INCLUDE_LIST}:${INCLUDE_KEY}
  fi
done
# end include processing

TASK=$(${AWS_CLI} sqs receive-message --wait-time-seconds ${QUEUE_POLL_DURATION} --queue-url ${TASK_QUEUE_URL})

if [ -n "${TASK}" ]
then
  MESSAGE_COUNT=$(echo "${TASK}" | jq ".Messages | length")
  if [ ${MESSAGE_COUNT} -eq 0 ]
  then
    # no messages received, nothing to do
    info "no task messages received, nothing to do"
    exit 0
  else
    TEMP_FILE=$(make_temp_file bottle-XXXXXX)
    function cleanup_on_exit(){
      rm -rf ${TEMP_FILE}
    }
    trap cleanup_on_exit EXIT
    echo "${TASK}" | jq --raw-output ".Messages[].Body" > ${TEMP_FILE}
    RECEIPT_HANDLE=$(echo "${TASK}" | jq --raw-output ".Messages[].ReceiptHandle")
    chmod +x ${TEMP_FILE}
    debug "task saved as ${TEMP_FILE}"
    debug "$(cat ${TEMP_FILE})"
    info 'begin output from task execution ***********************************'
    ${TEMP_FILE}
    TASK_RESULT=$?
    echo 
    info 'end output from task execution   ***********************************'
    if [ $TASK_RESULT -ne 0 ]
    then
      error "failure during task processing, will try again"
      error "$(cat ${TEMP_FILE})"
    else
      ${MY_DIR}/delete_message_from_task_queue "${RECEIPT_HANDLE}"
    fi
  fi
fi
